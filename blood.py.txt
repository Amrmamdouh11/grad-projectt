import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Step 1: Load and Preprocess the Dataset
# Assuming 'your_dataset.csv' is the name of your dataset file
dataset = pd.read_csv('your_dataset.csv')

# Handle missing values and convert categorical variables if needed

# Step 2: Explore the Data
# Perform exploratory data analysis (EDA) as needed

# Step 3: Split the Data
X_train, X_test, y_train_age, y_test_age = train_test_split(
    dataset.drop(['age', 'Systolic blood pressure', 'temperature'], axis=1),
    dataset['age'], test_size=0.2, random_state=42
)

X_train, X_test, y_train_sbp, y_test_sbp = train_test_split(
    dataset.drop(['age', 'Systolic blood pressure', 'temperature'], axis=1),
    dataset['Systolic blood pressure'], test_size=0.2, random_state=42
)

X_train, X_test, y_train_temp, y_test_temp = train_test_split(
    dataset.drop(['age', 'Systolic blood pressure', 'temperature'], axis=1),
    dataset['temperature'], test_size=0.2, random_state=42
)

# Step 4: Build Linear Regression Models
model_age = LinearRegression()
model_sbp = LinearRegression()
model_temp = LinearRegression()

# Additional models
model_blood_potassium = LinearRegression()
model_blood_sodium = LinearRegression()
model_blood_glucose = LinearRegression()

# Step 5: Train the Models
model_age.fit(X_train, y_train_age)
model_sbp.fit(X_train, y_train_sbp)
model_temp.fit(X_train, y_train_temp)

model_blood_potassium.fit(X_train, dataset['Blood potassium'])
model_blood_sodium.fit(X_train, dataset['Blood sodium'])
model_blood_glucose.fit(X_train, dataset['glucose'])

# Step 6: Evaluate the Models
# Predictions
y_pred_age = model_age.predict(X_test)
y_pred_sbp = model_sbp.predict(X_test)
y_pred_temp = model_temp.predict(X_test)

y_pred_blood_potassium = model_blood_potassium.predict(X_test)
y_pred_blood_sodium = model_blood_sodium.predict(X_test)
y_pred_blood_glucose = model_blood_glucose.predict(X_test)

# Evaluation metrics
mse_age = mean_squared_error(y_test_age, y_pred_age)
r2_age = r2_score(y_test_age, y_pred_age)

mse_sbp = mean_squared_error(y_test_sbp, y_pred_sbp)
r2_sbp = r2_score(y_test_sbp, y_pred_sbp)

mse_temp = mean_squared_error(y_test_temp, y_pred_temp)
r2_temp = r2_score(y_test_temp, y_pred_temp)

mse_blood_potassium = mean_squared_error(dataset['Blood potassium'], y_pred_blood_potassium)
r2_blood_potassium = r2_score(dataset['Blood potassium'], y_pred_blood_potassium)

mse_blood_sodium = mean_squared_error(dataset['Blood sodium'], y_pred_blood_sodium)
r2_blood_sodium = r2_score(dataset['Blood sodium'], y_pred_blood_sodium)

mse_blood_glucose = mean_squared_error(dataset['glucose'], y_pred_blood_glucose)
r2_blood_glucose = r2_score(dataset['glucose'], y_pred_blood_glucose)

# Print results
print("Model for Age:")
print(f'Mean Squared Error: {mse_age}')
print(f'R-squared: {r2_age}')

print("\nModel for Systolic Blood Pressure:")
print(f'Mean Squared Error: {mse_sbp}')
print(f'R-squared: {r2_sbp}')

print("\nModel for Temperature:")
print(f'Mean Squared Error: {mse_temp}')
print(f'R-squared: {r2_temp}')

print("\nModel for Blood Potassium:")
print(f'Mean Squared Error: {mse_blood_potassium}')
print(f'R-squared: {r2_blood_potassium}')

print("\nModel for Blood Sodium:")
print(f'Mean Squared Error: {mse_blood_sodium}')
print(f'R-squared: {r2_blood_sodium}')

print("\nModel for Blood Glucose:")
print(f'Mean Squared Error: {mse_blood_glucose}')
print(f'R-squared: {r2_blood_glucose}')

# Visualize predictions vs. actual values for one of the models (e.g., Age)
plt.scatter(y_test_age, y_pred_age)
plt.xlabel('Actual Age')
plt.ylabel('Predicted Age')
plt.title('Linear Regression Model for Age')
plt.show()

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Sample dataset of books with their descriptions, authors, and ratings
data = {
    'Title': ['Book 1', 'Book 2', 'Book 3', 'Book 4', 'Book 5'],
    'Author': ['Author A', 'Author B', 'Author A', 'Author C', 'Author D'],
    'Description': [
        'A gripping mystery novel with unexpected twists.',
        'A heartwarming tale of love and friendship.',
        'An epic fantasy adventure filled with magic and intrigue.',
        'A practical guide to programming in Python.',
        'Explore the wonders of the universe with this astronomy book.'
    ],
    'Rating': [4.5, 3.8, 4.2, 5.0, 4.1]
}

# Create a DataFrame from the data
books_df = pd.DataFrame(data)

# User interests (you can get this from user input or user history)
user_interests = 'programming Python'

# Combine user interests with book descriptions
books_df['Combined'] = (
    books_df['Title'] + ' ' + books_df['Description'] + ' ' +
    books_df['Author'] + ' ' + user_interests
)

# Use TfidfVectorizer to convert text into numerical features
tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(books_df['Combined'])

# Calculate cosine similarity between books
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Function to get book recommendations based on user interests
def get_book_recommendations(book_title, cosine_sim=cosine_sim, num_recommendations=3):
    book_index = books_df.index[books_df['Title'] == book_title].tolist()[0]
    sim_scores = list(enumerate(cosine_sim[book_index]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:(num_recommendations + 1)]  # Get top N similar books (excluding itself)
    book_indices = [i[0] for i in sim_scores]
    return books_df.iloc[book_indices][['Title', 'Author', 'Rating']]

# Function to get books by the same author
def get_books_by_author(author):
    return books_df[books_df['Author'] == author][['Title', 'Author', 'Rating']]

# Example: Get 5 book recommendations for 'Book 4'
recommended_books = get_book_recommendations('Book 4', num_recommendations=5)

# Display the recommended books
print(f"\nRecommended books for 'Book 4':\n{recommended_books.to_string(index=False)}")

# Example: Get books by the same author as 'Book 4'
books_by_author = get_books_by_author(books_df.loc[3, 'Author'])

# Display books by the same author
print(f"\nBooks by the same author as 'Book 4':\n{books_by_author.to_string(index=False)}")
